import React, {useState, useEffect, useRef} from 'react';
import {
  View,
  StyleSheet,
  PermissionsAndroid,
  Platform,
  TouchableOpacity,
  Text,
  Alert,
  ScrollView,
  Modal,
} from 'react-native';
import Geolocation from 'react-native-geolocation-service';
import {Card, Title, Provider as PaperProvider} from 'react-native-paper';
import ProfileCard from './ProfileCard';
import {useNavigation} from '@react-navigation/native';
import Toast from 'react-native-root-toast';
import Tts from 'react-native-tts';
import {
  accelerometer,
  setUpdateIntervalForType,
  SensorTypes,
} from 'react-native-sensors';

// ----------------------------------------------------------------
// Constants & Global Variables
// ----------------------------------------------------------------
const LPF_ALPHA = 0.95; // Higher value for more smoothing (new location has less effect)
const NOISE_THRESHOLD = 1.0; // Increase threshold to ignore very small changes (in meters)
const ACCURACY_THRESHOLD = 20; // Ignore readings with accuracy worse than 20 meters
const DISPLAY_SCALING_FACTOR = 2; // Divide the cumulative distance by this factor for display

// New Constants for Accelerometer-based Features
const STILLNESS_DURATION = 15000; // 15 seconds
const STILLNESS_ACCEL_THRESHOLD = 0.05; // threshold for near-zero movement (adjust as needed)
const MINOR_JERK_THRESHOLD = 2.0; // threshold for a minor jerk (m/s^2)
const MAJOR_JERK_THRESHOLD = 5.0; // threshold for a major jerk (m/s^2)
const SPEED_LIMIT = 10; // threshold for "moving too fast" alert (m/s)
const SPEED_ALERT_COOLDOWN = 30000; // cooldown in ms for speed alerts

let currentToast = null;

// ----------------------------------------------------------------
// Request Permissions (Location & Body Sensors)
// ----------------------------------------------------------------
const requestPermissions = async () => {
  if (Platform.OS === 'android') {
    const locationGranted = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      {
        title: 'Location Permission',
        message: 'This app needs access to your location for tracking.',
        buttonNeutral: 'Ask Me Later',
        buttonNegative: 'Cancel',
        buttonPositive: 'OK',
      },
    );
    const bodySensorsGranted = await PermissionsAndroid.request(
      PermissionsAndroid.PERMISSIONS.BODY_SENSORS,
      {
        title: 'Body Sensors Permission',
        message: 'This app needs access to your body sensors for tracking.',
        buttonNeutral: 'Ask Me Later',
        buttonNegative: 'Cancel',
        buttonPositive: 'OK',
      },
    );
    return (
      locationGranted === PermissionsAndroid.RESULTS.GRANTED &&
      bodySensorsGranted === PermissionsAndroid.RESULTS.GRANTED
    );
  }
  return true;
};

// ----------------------------------------------------------------
// Toast Notification for Jerk Detection (Placeholder)
// ----------------------------------------------------------------
const showToastNotification = (cause, intensity) => {
  if (currentToast !== null) {
    Toast.hide(currentToast);
    currentToast = null;
  }
  const toastContent = (
    <View style={toastStyles.container}>
      <Text style={toastStyles.causeText} numberOfLines={1}>
        {cause} Detected
      </Text>
      <Text style={toastStyles.intensityText} numberOfLines={1}>
        Intensity: {intensity}
      </Text>
    </View>
  );
  currentToast = Toast.show(toastContent, {
    duration: 3000,
    position: Toast.positions.TOP,
    shadow: false,
    animation: true,
    hideOnPress: true,
    delay: 0,
    containerStyle: {
      backgroundColor: '#E6E6FA',
      borderColor: '#6200ee',
      borderWidth: 2,
      borderRadius: 14,
      padding: 16,
      elevation: 0,
      shadowColor: 'transparent',
      shadowOpacity: 2,
      shadowOffset: {width: 0, height: 0},
      width: '95%',
      alignSelf: 'center',
    },
  });
};

// ----------------------------------------------------------------
// Simple Star Rating Component for Journey Rating
// ----------------------------------------------------------------
const StarRating = ({rating, onRate}) => {
  const stars = [1, 2, 3, 4, 5];
  return (
    <View
      style={{
        flexDirection: 'row',
        justifyContent: 'center',
        marginVertical: 10,
      }}>
      {stars.map(star => (
        <TouchableOpacity key={star} onPress={() => onRate(star)}>
          <Text
            style={{fontSize: 32, color: star <= rating ? '#FFD700' : '#ccc'}}>
            â˜…
          </Text>
        </TouchableOpacity>
      ))}
    </View>
  );
};

// ----------------------------------------------------------------
// Main App Component
// ----------------------------------------------------------------
export default function App() {
  const navigation = useNavigation();
  const isIOS = Platform.OS === 'ios';

  // State Variables for Location/Speed/Tracking (unchanged)
  const [location, setLocation] = useState(null);
  const [speed, setSpeed] = useState(0);
  const [tracking, setTracking] = useState(false);
  const [paused, setPaused] = useState(false);
  const [startTime, setStartTime] = useState(null);
  const [distanceTraveled, setDistanceTraveled] = useState(0);
  const [averageSpeed, setAverageSpeed] = useState(0);
  const [duration, setDuration] = useState(0);
  const [showResults, setShowResults] = useState(false);
  const [countdown, setCountdown] = useState(null);

  // New State Variables for Additional Features
  const [minorJerkCount, setMinorJerkCount] = useState(0);
  const [majorJerkCount, setMajorJerkCount] = useState(0);
  const [sharpLeftCount, setSharpLeftCount] = useState(0);
  const [sharpRightCount, setSharpRightCount] = useState(0);
  const [bumpCount, setBumpCount] = useState(0);
  const [fallCount, setFallCount] = useState(0);
  const [stopCount, setStopCount] = useState(0);
  const [totalStopTime, setTotalStopTime] = useState(0);
  const [assistanceAlertVisible, setAssistanceAlertVisible] = useState(false);
  const [rating, setRating] = useState(0);

  // Refs for storing subscriptions and previous values
  const locationSubscription = useRef(null);
  const lastLocation = useRef(null);
  const lastLocationTimeRef = useRef(null);
  const speedReadings = useRef([]);
  // Holds the low-pass filtered location used for distance calculation.
  const filteredLocation = useRef(null);
  // Use a ref to accumulate the total distance without triggering re-renders on every update.
  const cumulativeDistance = useRef(0);

  // Refs for Accelerometer-based Features
  const lastAccelRef = useRef(null);
  const stillnessStartRef = useRef(null);
  const inStillStateRef = useRef(false);
  const lastSpeedAlertTimeRef = useRef(0);

  // ----------------------------------------------------------------
  // useEffect: Initialize TTS & Request iOS Location Permission
  // ----------------------------------------------------------------
  useEffect(() => {
    Tts.setDefaultLanguage('en-US');
    if (Platform.OS === 'android') {
      Tts.setDefaultRate(0.5);
    }
    Tts.setDefaultPitch(1.0);

    if (isIOS) {
      Geolocation.requestAuthorization('whenInUse');
    }
    // Cleanup on unmount
    return () => {
      stopAllSensors();
    };
  }, [isIOS]);

  // ----------------------------------------------------------------
  // useEffect: Update Distance State from cumulativeDistance every second
  // ----------------------------------------------------------------
  useEffect(() => {
    const interval = setInterval(() => {
      setDistanceTraveled(cumulativeDistance.current);
    }, 1000);
    return () => clearInterval(interval);
  }, []);

  // ----------------------------------------------------------------
  // Accelerometer Subscription: Stillness & Jerk Detection (Additional Features)
  // ----------------------------------------------------------------
  useEffect(() => {
    let accelSubscription = null;
    if (tracking && !paused) {
      setUpdateIntervalForType(SensorTypes.accelerometer, 250); // update every 250ms
      accelSubscription = accelerometer.subscribe(({x, y, z}) => {
        // --- Jerk Detection Logic ---
        if (lastAccelRef.current) {
          const deltaX = Math.abs(x - lastAccelRef.current.x);
          const deltaY = Math.abs(y - lastAccelRef.current.y);
          const deltaZ = Math.abs(z - lastAccelRef.current.z);
          const maxDelta = Math.max(deltaX, deltaY, deltaZ);
          if (maxDelta > MINOR_JERK_THRESHOLD) {
            if (maxDelta >= MAJOR_JERK_THRESHOLD) {
              setMajorJerkCount(prev => prev + 1);
              if (maxDelta === deltaX) {
                // Determine left/right based on sign
                if (x - lastAccelRef.current.x > 0) {
                  setSharpRightCount(prev => prev + 1);
                  Tts.speak('Caution! Sharp right turn detected.');
                  showToastNotification(
                    'Sharp Right Turn',
                    maxDelta.toFixed(1),
                  );
                } else {
                  setSharpLeftCount(prev => prev + 1);
                  Tts.speak('Caution! Sharp left turn detected.');
                  showToastNotification('Sharp Left Turn', maxDelta.toFixed(1));
                }
              } else if (maxDelta === deltaY) {
                setBumpCount(prev => prev + 1);
                Tts.speak('Caution! Bump detected.');
                showToastNotification('Bump', maxDelta.toFixed(1));
              } else if (maxDelta === deltaZ) {
                setFallCount(prev => prev + 1);
                Tts.speak('Alert! Fall detected.');
                showToastNotification('Fall', maxDelta.toFixed(1));
              }
            } else {
              // For minor jerks, update the minor jerk count.
              setMinorJerkCount(prev => prev + 1);
            }
          }
        }
        lastAccelRef.current = {x, y, z};

        // --- Stillness Detection ---
        // Compute the magnitude of acceleration.
        const accelMagnitude = Math.sqrt(x * x + y * y + z * z);
        if (accelMagnitude < STILLNESS_ACCEL_THRESHOLD) {
          if (!stillnessStartRef.current) {
            stillnessStartRef.current = Date.now();
          }
          if (
            stillnessStartRef.current &&
            Date.now() - stillnessStartRef.current >= STILLNESS_DURATION &&
            !inStillStateRef.current
          ) {
            inStillStateRef.current = true;
            setStopCount(prev => prev + 1);
            Tts.speak('Are you okay? Do you need assistance?');
            setAssistanceAlertVisible(true);
          }
        } else {
          if (inStillStateRef.current && stillnessStartRef.current) {
            // When movement resumes, add to total stop time.
            const stopDuration = Date.now() - stillnessStartRef.current;
            setTotalStopTime(prev => prev + stopDuration);
          }
          stillnessStartRef.current = null;
          inStillStateRef.current = false;
          if (assistanceAlertVisible) {
            setAssistanceAlertVisible(false);
          }
        }
      });
    }
    return () => {
      if (accelSubscription) {
        accelSubscription.unsubscribe();
      }
    };
  }, [tracking, paused, assistanceAlertVisible]);

  // ----------------------------------------------------------------
  // Speed Alert: Warn if Moving Too Fast
  // ----------------------------------------------------------------
  useEffect(() => {
    if (tracking && !paused && speed > SPEED_LIMIT) {
      const now = Date.now();
      if (now - lastSpeedAlertTimeRef.current > SPEED_ALERT_COOLDOWN) {
        Tts.speak('You are moving too fast, slow down.');
        lastSpeedAlertTimeRef.current = now;
      }
    }
  }, [speed, tracking, paused]);

  // ----------------------------------------------------------------
  // Start Tracking: Request Permissions and Get Starting Point
  // ----------------------------------------------------------------
  const startTrackingFunc = async () => {
    const hasPermission = await requestPermissions();
    if (!hasPermission) {
      Alert.alert(
        'Permissions Required',
        'Location and Body Sensors permissions are required for tracking.',
      );
      return;
    }
    Geolocation.getCurrentPosition(
      position => {
        // Announce start using TTS
        Tts.speak('Tracking started');
        beginTracking();
      },
      error => {
        console.log('Location Error: ', error);
        Alert.alert(
          'Location Error',
          'Unable to get your current location. Please check your permissions and try again.',
        );
      },
      {enableHighAccuracy: true, timeout: 15000, maximumAge: 10000},
    );
  };

  // ----------------------------------------------------------------
  // Begin Tracking: Initialize States and Start Location Watch
  // ----------------------------------------------------------------
  const beginTracking = () => {
    setTracking(true);
    setPaused(false);
    setStartTime(Date.now());
    speedReadings.current = [];
    cumulativeDistance.current = 0;
    setDistanceTraveled(0);
    lastLocation.current = null;
    lastLocationTimeRef.current = null;
    filteredLocation.current = null;

    // Start watching the user's location
    locationSubscription.current = Geolocation.watchPosition(
      position => {
        if (!paused) {
          const {coords} = position;
          const {latitude: rawLat, longitude: rawLon, accuracy} = coords;
          const now = Date.now();

          // Optionally skip readings with poor accuracy
          if (accuracy && accuracy > ACCURACY_THRESHOLD) {
            return;
          }

          // --- Speed Calculation ---
          let computedSpeed = 0;
          if (
            Platform.OS === 'ios' &&
            coords.speed != null &&
            coords.speed >= 0
          ) {
            computedSpeed = coords.speed;
          } else if (lastLocation.current && lastLocationTimeRef.current) {
            const dt = (now - lastLocationTimeRef.current) / 1000;
            const dist = calculateDistance(lastLocation.current, {
              latitude: rawLat,
              longitude: rawLon,
            });
            computedSpeed = dt > 0 ? dist / dt : 0;
          }
          lastLocationTimeRef.current = now;
          setSpeed(computedSpeed);
          speedReadings.current.push(computedSpeed);
          setLocation({latitude: rawLat, longitude: rawLon});

          // --- Smoothed Distance Calculation & Accumulation ---
          if (!filteredLocation.current) {
            // Initialize the filtered location on the first update.
            filteredLocation.current = {latitude: rawLat, longitude: rawLon};
          } else {
            // Apply a low-pass filter to smooth out the raw GPS coordinates.
            const newFilteredLat =
              LPF_ALPHA * rawLat +
              (1 - LPF_ALPHA) * filteredLocation.current.latitude;
            const newFilteredLon =
              LPF_ALPHA * rawLon +
              (1 - LPF_ALPHA) * filteredLocation.current.longitude;
            const newFilteredLocation = {
              latitude: newFilteredLat,
              longitude: newFilteredLon,
            };

            // Compute the distance between the previous filtered position and the new one.
            const deltaDistance = calculateDistance(
              filteredLocation.current,
              newFilteredLocation,
            );
            // Update the filtered location.
            filteredLocation.current = newFilteredLocation;

            // Only add the delta if itâ€™s larger than our noise threshold
            // or if the computed speed suggests actual movement.
            if (deltaDistance > NOISE_THRESHOLD || computedSpeed > 0.2) {
              cumulativeDistance.current += deltaDistance;
            }
          }
        }
      },
      error => console.log('Location Error: ', error),
      {
        enableHighAccuracy: true,
        distanceFilter: 0,
        interval: 250,
        fastestInterval: 250,
        forceRequestLocation: true,
        showsBackgroundLocationIndicator: true,
        pausesLocationUpdatesAutomatically: false,
        activityType: 'fitness',
        accuracy: Platform.OS === 'ios' ? 'bestForNavigation' : 'high',
        maximumAge: 0,
      },
    );
  };

  // ----------------------------------------------------------------
  // Utility: Calculate Distance using Haversine Formula
  // ----------------------------------------------------------------
  const calculateDistance = (coord1, coord2) => {
    const {latitude: lat1, longitude: lon1} = coord1;
    const {latitude: lat2, longitude: lon2} = coord2;
    const R = 6371e3; // Earth radius in meters
    const Ï†1 = (lat1 * Math.PI) / 180;
    const Ï†2 = (lat2 * Math.PI) / 180;
    const Î”Ï† = ((lat2 - lat1) * Math.PI) / 180;
    const Î”Î» = ((lon2 - lon1) * Math.PI) / 180;
    const a =
      Math.sin(Î”Ï† / 2) ** 2 +
      Math.cos(Ï†1) * Math.cos(Ï†2) * Math.sin(Î”Î» / 2) ** 2;
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  };

  // ----------------------------------------------------------------
  // Stop Tracking: Clear Subscriptions and Compute Journey Metrics
  // ----------------------------------------------------------------
  const stopTracking = () => {
    setTracking(false);
    if (locationSubscription.current) {
      Geolocation.clearWatch(locationSubscription.current);
      locationSubscription.current = null;
    }
    // Compute average speed from recorded speed readings.
    const readings = speedReadings.current;
    const avgSpeed =
      readings.length > 0
        ? readings.reduce((a, b) => a + b, 0) / readings.length
        : 0;
    setAverageSpeed(avgSpeed);
    // Compute journey duration (in seconds).
    const journeyDuration = startTime ? (Date.now() - startTime) / 1000 : 0;
    setDuration(journeyDuration);

    // Announce stop using TTS.
    Tts.speak('Tracking stopped');
    setShowResults(true);
  };

  // ----------------------------------------------------------------
  // Cleanup: Stop All Sensors/Subscriptions on Component Unmount
  // ----------------------------------------------------------------
  const stopAllSensors = () => {
    if (locationSubscription.current) {
      Geolocation.clearWatch(locationSubscription.current);
      locationSubscription.current = null;
    }
  };

  // ----------------------------------------------------------------
  // Handle Start Button: 3-Second Countdown Before Tracking Begins
  // ----------------------------------------------------------------
  const handleStartButton = () => {
    let count = 3;
    setCountdown(count);
    const interval = setInterval(() => {
      count -= 1;
      if (count === 0) {
        clearInterval(interval);
        setCountdown(null);
        startTrackingFunc();
      } else {
        setCountdown(count);
      }
    }, 1000);
  };

  // Compute the final displayed distance based on the scaling factor.
  const finalDistance = distanceTraveled / DISPLAY_SCALING_FACTOR;

  return (
    <PaperProvider>
      <View style={styles.container}>
        {/* Assistance Alert Modal */}
        {assistanceAlertVisible && (
          <Modal
            transparent={true}
            animationType="fade"
            visible={assistanceAlertVisible}>
            <View style={styles.modalContainer}>
              <View style={styles.modalContent}>
                <Text style={{fontSize: 18, fontWeight: 'bold'}}>
                  Assistance Alert
                </Text>
                <Text style={{marginVertical: 10}}>
                  It seems you have been stationary for a while. Do you need
                  help?
                </Text>
                <TouchableOpacity
                  style={styles.button}
                  onPress={() => setAssistanceAlertVisible(false)}>
                  <Text style={styles.buttonText}>Dismiss</Text>
                </TouchableOpacity>
              </View>
            </View>
          </Modal>
        )}

        {/* Initial Screen: Profile and Start Button */}
        {!tracking && !showResults && (
          <>
            <ProfileCard />
            <TouchableOpacity style={styles.button} onPress={handleStartButton}>
              <Text style={styles.buttonText}>
                {countdown !== null ? countdown : 'Start Tracking'}
              </Text>
            </TouchableOpacity>
          </>
        )}

        {/* Ongoing Trip Screen */}
        {tracking && (
          <Card style={styles.card}>
            <Card.Content>
              <Title style={styles.title}>Ongoing Trip</Title>
              <Text style={styles.speedLabel}>Speed:</Text>
              <Text style={[styles.speedText, {color: 'green'}]}>
                {speed.toFixed(2)} m/s
              </Text>
              <Text style={styles.speedLabel}>Distance:</Text>
              <Text style={[styles.speedText, {color: 'blue'}]}>
                {finalDistance.toFixed(2)} m
              </Text>
              <View style={styles.buttonContainer}>
                <TouchableOpacity style={styles.button} onPress={stopTracking}>
                  <Text style={styles.buttonText}>Stop Journey</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.button}
                  onPress={() => setPaused(!paused)}>
                  <Text style={styles.buttonText}>
                    {paused ? 'Resume' : 'Pause'}
                  </Text>
                </TouchableOpacity>
              </View>
            </Card.Content>
          </Card>
        )}

        {/* Journey Summary Screen */}
        {showResults && (
          <View style={styles.summaryContainer}>
            <Card style={styles.card}>
              <Card.Content>
                <Text style={styles.resultsTitle}>Journey Summary</Text>
                <ScrollView style={styles.summaryScrollView}>
                  <View style={styles.resultContainer}>
                    <Text style={styles.resultText}>
                      Average Speed:{' '}
                      <Text style={styles.resultValue}>
                        {averageSpeed.toFixed(2)} m/s
                      </Text>
                    </Text>
                    <Text style={styles.resultText}>
                      Total Distance:{' '}
                      <Text style={styles.resultValue}>
                        {finalDistance.toFixed(2)} meters
                      </Text>
                    </Text>
                    <Text style={styles.resultText}>
                      Journey Duration:{' '}
                      <Text style={styles.resultValue}>
                        {duration.toFixed(2)} seconds
                      </Text>
                    </Text>
                    {/* Additional Metrics */}
                    <Text style={styles.resultText}>
                      Minor Jerks:{' '}
                      <Text style={styles.resultValue}>{minorJerkCount}</Text>
                    </Text>
                    <Text style={styles.resultText}>
                      Major Jerks:{' '}
                      <Text style={styles.resultValue}>{majorJerkCount}</Text>
                    </Text>
                    <Text style={styles.resultText}>
                      Sharp Left Turns:{' '}
                      <Text style={styles.resultValue}>{sharpLeftCount}</Text>
                    </Text>
                    <Text style={styles.resultText}>
                      Sharp Right Turns:{' '}
                      <Text style={styles.resultValue}>{sharpRightCount}</Text>
                    </Text>
                    <Text style={styles.resultText}>
                      Bumps: <Text style={styles.resultValue}>{bumpCount}</Text>
                    </Text>
                    <Text style={styles.resultText}>
                      Falls: <Text style={styles.resultValue}>{fallCount}</Text>
                    </Text>
                    <Text style={styles.resultText}>
                      Stops Detected:{' '}
                      <Text style={styles.resultValue}>{stopCount}</Text>
                    </Text>
                    <Text style={styles.resultText}>
                      Total Stop Time:{' '}
                      <Text style={styles.resultValue}>
                        {(totalStopTime / 1000).toFixed(2)} seconds
                      </Text>
                    </Text>
                  </View>
                </ScrollView>
                <Text
                  style={{
                    fontSize: 18,
                    fontWeight: '600',
                    marginTop: 10,
                    textAlign: 'center',
                  }}>
                  Rate Your Journey
                </Text>
                <StarRating rating={rating} onRate={setRating} />
                <View style={styles.centeredButtonContainer}>
                  <TouchableOpacity
                    style={styles.button}
                    onPress={() => {
                      // Reset state for a new journey.
                      setShowResults(false);
                      cumulativeDistance.current = 0;
                      setDistanceTraveled(0);
                      setSpeed(0);
                      setAverageSpeed(0);
                      setDuration(0);
                      // Optionally reset additional metrics and rating.
                      setMinorJerkCount(0);
                      setMajorJerkCount(0);
                      setSharpLeftCount(0);
                      setSharpRightCount(0);
                      setBumpCount(0);
                      setFallCount(0);
                      setStopCount(0);
                      setTotalStopTime(0);
                      setRating(0);
                    }}>
                    <Text style={styles.buttonText}>Back</Text>
                  </TouchableOpacity>
                </View>
              </Card.Content>
            </Card>
          </View>
        )}
      </View>
    </PaperProvider>
  );
}

// ----------------------------------------------------------------
// Styles
// ----------------------------------------------------------------
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'rgba(230,230,250,0.4)',
    padding: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  card: {
    width: '100%',
    borderRadius: 10,
    elevation: 5,
    backgroundColor: '#ffffff',
    marginVertical: 10,
  },
  title: {
    fontSize: 22,
    fontWeight: '600',
    color: '#333',
    textAlign: 'center',
    marginBottom: 20,
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginTop: 20,
  },
  button: {
    backgroundColor: '#6200ee',
    padding: 12,
    borderRadius: 5,
    marginVertical: 10,
    width: '45%',
    alignItems: 'center',
  },
  buttonText: {
    color: 'white',
    fontSize: 14,
    textAlign: 'center',
  },
  speedLabel: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 5,
    color: '#333',
    textAlign: 'center',
  },
  speedText: {
    fontSize: 22,
    fontWeight: '600',
    marginBottom: 20,
    textAlign: 'center',
  },
  resultsTitle: {
    fontSize: 22,
    fontWeight: '600',
    marginBottom: 20,
    color: '#6200ee',
    textAlign: 'center',
  },
  resultContainer: {
    marginBottom: 20,
    paddingHorizontal: 10,
  },
  resultText: {
    fontSize: 14,
    marginBottom: 10,
    color: '#333',
  },
  resultValue: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#915F6D',
  },
  summaryContainer: {
    position: 'absolute',
    left: 20,
    right: 20,
  },
  summaryScrollView: {
    maxHeight: 500,
  },
  centeredButtonContainer: {
    alignItems: 'center',
    marginTop: 10,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#fff',
    padding: 20,
    width: '80%',
    borderRadius: 10,
    alignItems: 'center',
  },
});

const toastStyles = StyleSheet.create({
  container: {
    backgroundColor: 'transparent',
    borderColor: 'transparent',
    borderWidth: 0,
    borderRadius: 0,
    paddingVertical: 8,
    paddingHorizontal: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  causeText: {
    fontSize: 22,
    fontWeight: 'bold',
    color: '#6200ee',
    textAlign: 'center',
  },
  intensityText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#d32f2f',
    textAlign: 'center',
  },
});
